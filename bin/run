#!/usr/bin/env bash

set -e

# usage: run [-p PLAN] [-f PR] [-t PR] [-s STEP] [-o FILE]
#
# -f PR             from pull request (excluded)
# -t PR             to pull request (excluded)
# -s STEP           every n pull requests, defaults to 0
# -o FILE           data output to FILE, defaults to data/history.csv
# -p PLAN           the test plan, default to `bin/plan`
#
#

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

## init

# before `getopts`, so that defaults can be overwritten
source "$PROG_HOME/bin/config"

args="$@"

# parse command line params
while getopts "f:t:s:o:p:" opt; do
 case $opt in
    f)
      FROM_PR=$OPTARG
      ;;
    t)
      TILL_PR=$OPTARG
      ;;
    s)
      SKIP=$OPTARG
      ;;
    o)
      FILE=$OPTARG
      ;;
    p)
      PLAN=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done


shift $((OPTIND-1))


if [[ -z $SKIP ]]; then
  SKIP=0
  echo "skip steps defaults to $SKIP"
fi

# schedule

cd "$PROG_HOME/dotty"
git fetch origin main

# c488e01 is the commit that refactors the repo
merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' c488e01..origin/main --reverse)

skip_counter=$SKIP
in_range=false

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    # finish test when TILL_PR is reached
    if [[ $pr == $TILL_PR ]]; then
       exit 0
    fi

    if [[ $in_range == "true" ]]; then

        if ((skip_counter == SKIP)); then
          echo "bin/gauge -o \"$FILE\" -p \"$PLAN\" $pr $commit && bin/deploy" > "$PROG_HOME/jobs/work-regression-$pr.job"
          skip_counter=0
        else
          skip_counter=$(expr $skip_counter + 1)
        fi
    fi

    if [[ $pr == $FROM_PR ]]; then
       in_range=true
    fi

  fi
done <<< "$merge_commits"
