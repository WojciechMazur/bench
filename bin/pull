#!/usr/bin/env bash

set -e

# usage: pull [-n] [-p PROFILE] [-c COMMIT1:COMMIT2] PR
#
# -n             new test session
# -c             commits to test, separated by semicolon
# -p             test profile, `quotes` or `default`
#
# PR             pull request number
#


############# Resolve directory

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

############## Error handling

function report {
  log_url="$LOG_URL/$log_name"
  publish_log "$LOG"

  message="performance test failed:

Please check $log_url for more information"

  ghi comment $PR -m "$message" -- $REPO

  exit 1
}

trap 'report' ERR

############## Configs and library

# before `getopts`, so that defaults can be overwritten
source "$PROG_HOME/bin/config"
source "$PROG_HOME/bin/common"

PROFILE=default

############## Options
while getopts "c:np:" opt; do
  case $opt in
    c)
      COMMITS=$OPTARG
      ;;
    p)
      PROFILE=$OPTARG
      ;;
    n)
      FRESH="true"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

############# set session home directory
# By default append points to last test session
# input: requires $PR to be set
# output: set $SESSION_DIR
set_session_dir() {
  count=$(find $PROG_HOME/site/* -name "$PR*" | wc -l)  # * will ignore .git hidden folder

  if [[ $count == "0" || ($count == "1" && $FRESH != "true") ]]; then
    SESSION_DIR="$PR"
  elif [[ $FRESH == "true" ]]; then
    SESSION_DIR="$PR-$(expr $count)"
  else
    SESSION_DIR="$PR-$(expr $count - 1)"
  fi
}

############# Variables

PR=$1

set_session_dir

SESSION_HOME=$PROG_HOME/site/$SESSION_DIR
ORIG_FILE=$FILE
FILE=$SESSION_HOME/history.csv
LOG=$PROG_HOME/logs/pull-$PR-$(date +%m-%d-%H.%M).out
REPO=lampepfl/dotty

# make sure log exists
touch "$LOG"

############## test
cd $PROG_HOME

############## check profile & update plan

if [ ! -f profiles/$PROFILE.yml ]; then
   echo "unknown profile: $PROFILE" >> $LOG
   exit 1
fi

PLAN=$PROG_HOME/profiles/$PROFILE.plan

# make sure folder for session home exists
mkdir -p $SESSION_HOME

############# get PR info

output=/tmp/pull-$PR
curl "https://api.github.com/repos/lampepfl/dotty/pulls/$PR" > $output

info=$(cat $output | jq '{ commit: .head.sha, author: .user.login, repo: .head.repo.full_name, branch: .head.ref }')
author=$(echo $info | jq -r '.author' )
last_commit=$(echo $info | jq -r '.commit' )
from_repo=$(echo $info | jq -r '.repo' )
from_branch=$(echo $info | jq -r '.branch' )

if [[ -z $COMMITS ]]; then
  COMMITS="$last_commit"
fi



cd dotty/

if [[ $from_repo == "dotty-staging/dotty" ]]; then
   remote_name="staging"
else
   remote_name="PR$PR"

   if git remote | grep $remote_name > /dev/null; then
     echo "remote $remote_name already exists"
   else
     git remote add $remote_name https://github.com/$from_repo
   fi
fi

# get commits from github
git fetch $remote_name $from_branch
git fetch origin master
master_hash=$(git rev-parse --short origin/master)

############ test commits

for origin_commit in $(echo $COMMITS | tr ":" "\n")
do
  cd $PROG_HOME/dotty

  # do a local merge
  commit_time=$(date +"%Y-%m-%dT%H:%M:%S%z")   # use current time so the point appear last
  short_hash=$(git rev-parse --short $origin_commit)

  git reset --hard origin/master
  git merge $origin_commit -m "merge PR #$PR commit $short_hash with master" >> $LOG 2>&1

  prepare "HEAD"

  cd $PROG_HOME
  test "$short_hash" "$author" "$commit_time" "$PR" >> $LOG 2>&1
done

############## Deploy

# build web
cd $PROG_HOME/web

# copy resource
cd $PROG_HOME
cp -r web/* $SESSION_HOME

# build data
TEMP_FILE="/tmp/pull-$PR.csv"
cp $ORIG_FILE $TEMP_FILE
cat $FILE >> $TEMP_FILE

mkdir -p $SESSION_HOME/data
cp profiles/$PROFILE.js $SESSION_HOME/data/charts.js
bin/csv -p profiles/$PROFILE.yml $TEMP_FILE $SESSION_HOME/data/

# push to github
cd $PROG_HOME/site
git add .
git commit -m "[bot]update site for pull request $PR"
eval "$WEB_PUBLISH"

message="Performance test finished successfully:

Visit $WEB_URL/$SESSION_DIR/ to see the changes.

Benchmarks is based on merging with master ($master_hash)"

ghi comment $PR -m "$message" -- $REPO
