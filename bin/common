#!/usr/bin/env bash

set -e

trim() {
  echo -e "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

run-sbt() {
  cd "$PROG_HOME/dotty"
  mkdir -p "$SBT_HOME/boot"
  mkdir -p "$IVY_HOME"
  sbt -sbt-boot "$SBT_HOME/boot" -ivy "$IVY_HOME" -sbt-dir "$SBT_HOME" "$1"
}

measure-and-output() {
  run-sbt "$1" 2>&1 | tee output.txt

  if [ $? -eq 0 ]; then
    runs=$(cat output.txt | grep -E '^Iteration' | sed -r 's/^Iteration.*: ([0-9\.]+).*$/\1/')
    warmups=$(cat output.txt | grep -E '^# Warmup Iteration' | sed -r 's/^# Warmup Iteration.*: ([0-9\.]+).*$/\1/' | tr '\n' ' ')

    runs_flat=$(echo "$runs" | tr '\n' ' ')
    runs_flat=$(trim "$runs_flat")

    if [ -z "$runs_flat" ]; then
      if [ -z "$CI" ]; then
        log_url="$LOG_URL/$(basename $LOG)"
        message="test $key failed for $pr

Please check the log file for more details: $LOG_URL/$(basename $LOG)"
        ghi open -m "$message" -- $MONITOR_REPO
      else # CI is set
        exit 1
      fi
    else
      echo "$key, $pr, $time, $commit, $(date +"%Y-%m-%dT%H:%M:%S%z"), $warmups, $runs_flat" >> "$FILE"
    fi
  fi
}

measure() {
  args="$@"
  measure-and-output "scala3-bench-bootstrapped/jmh:run $args -d $PROG_HOME/out -nowarn"
}

measure-run() {
  args="$@"
  measure-and-output "scala3-bench-run/jmh:run $args --"
}

prepare() {
  commit=$1

  cd $PROG_HOME
  # clean up logs that are 5 days old
  find logs/ -name "*.out" -type f -mtime +5 -exec rm -f {} \;
  rm -fr out
  mkdir -p out

  # prepare dotty source code
  cd "$PROG_HOME/dotty"
  git reset --hard $commit
  git submodule sync
  git submodule init
  git submodule update

  git clean -xdf
  run-sbt "scala3-bench-bootstrapped/jmh:compile" 2>&1 | tee -a "$LOG"

  # for compilation with `dotc`
  run-sbt "dist/pack"  2>&1 | tee -a "$LOG"

  # update profiles
  $PROG_HOME/bin/sync-profiles
}

compile() {
  args="$@"
  run-sbt "scala3-bootstrapped/scalac $args" 2>&1 | tee -a "$LOG"
}

set-key() {
  key=$1
}

test() {
  commit=$1
  author=$2
  time=$3
  pr=$4

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  source "$PLAN" 2>&1 | tee "$LOG"
}

publish_log() {
  log_name=$(basename $1)

  mkdir -p "$PROG_HOME/site/logs/"
  cp "$1" "$PROG_HOME/site/logs/$log_name"
  pushlish_site "publish log $log_name"
}

publish_site() {
  msg="$1"
  cd "$PROG_HOME/site"
  git add .
  git commit -m "$msg"
  eval "$WEB_PUBLISH"
}
